x = Norm(0, 1)
library(distr)
x = Norm(0, 1)
plot(x)
?Norm
?csv.readtable
?read.csv
dtalbe = read.csv("activity/activity.csv")
View(dtable)
dtable = read.csv("activity/activity.csv")
View(dtable)
str(dtable)
summary(dtable)
steps = na.omit(dtable$steps)
mean(steps)
mean(na.omit(dtable$steps))
head(dtable)
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(x)
sum(x[, 4])
class(x[, 4])
x[1, 4]
x[2, 4]
class(x$v4)
class(x$V4)
sum(x$V4)
sum(x$V6)
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
head(x)
sum(x$V4)
plot(x$V4)
mean(x$V4)
tail(x)
x[1254, ]
mean(x$V4[1:1254])
sum(x$V4[1:1254])
x <- read.fwf(
file="getdata_wksst8110.for",
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
dtable = read.csv("activity/activity.csv")
summary(dtable)
tapply(dtable$steps, dtable$date, sum)
tapply(dtable$steps, dtable$date, sum, na.omit = TRUE)
tapply(na.omit(dtable$steps), dtable$date, sum)
dtable$steps = na.omit(dtable$steps)
dtable$steps[is.na(dtable$steps)] = 0
tapply(dtable$steps, dtable$date, sum)
new_steps = dtable$steps[is.na(dtable$steps)] = 0
tapply(new_steps, dtable$date, sum)
dtable = read.csv("activity/activity.csv")
summary(dtable)
View(dtable)
new_data = na.omit(dtable)
tapply(new_data$steps, new_data$date, sum)
head(new_date)
head(new_data)
new_data = na.omit(dtable)
#new_steps = dtable$steps[is.na(dtable$steps)] = 0
tapply(new_data$steps, new_data$date, sum)
?is.na
DF <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA))
DF
na.omit(DF)
tapply(DF$x, DF$y, sum)
DF
tapply(DF$y, DF$x, sum)
dd = na.omit(DF)
dd
tapply(dd$y, dd$x, sum)
dtable = read.csv("activity/activity.csv")
summary(dtable)
new_data = na.omit(dtable )
tapply(new_data$steps, new_data$date, sum)
head(new_data)
level(new_data$steps)
levels(new_data$steps)
class(new_data$steps)
class(new_data$date)
levels(new_data$date)
levels(dtable$date)
View(new_data)
View(new_data)
new_data = na.exclude(dtable)
#new_data = dtable[is.na(dtable$steps),]
#new_steps = dtable$steps[is.na(dtable$steps)] = 0
tapply(new_data$steps, new_data$date, sum)
new_data = dtable[!is.na(dtable$steps),]
#new_steps = dtable$steps[is.na(dtable$steps)] = 0
tapply(new_data$steps, new_data$date, sum)
indices = is.na(dtable)
indices = !is.na(dtable)
tapply(dtable$steps[indices], dtable$date[indices], sum)
indices = !is.na(dtable)
tapply(dtable$steps[indices], dtable$date[indices], sum)
?na.rm
?mean
tapply(dtable$steps[indices], dtable$date[indices], sum, na.rm = TRUE)
dtable$date = character(dtable$date)
dtable$date = as.character(dtable$date)
new_table = na.omit(dtable)
tapply(new_data$steps, new_data$date, sum)
class(new_data$date)
class(dtable$date)
dtable$date = as.character(dtable$date)
new_data = na.omit(dtable)
tapply(new_data$steps, new_data$date, sum)
sum_day = tapply(new_data$steps, new_data$date, sum)
hist(sum_day)
mean(sum_day)
median(sum_day)
library(dplyr)
install.packages("dplyr")
View(new_table)
View(new_table)
library(dplyr)
install.packages("dplyr")
12*24
24*60
class(new_data$interval)
sum_day = tapply(new_data$steps, new_data$interval, sum)
sum_day
plot(sum_day)
names(sum_day)
plot(names(sum_day), sum_day)
mean_interval = tapply(new_data$steps, new_data$interval, mean)
plot(names(mean_interval), mean_interval)
plot(names(mean_interval), mean_interval, type = "l")
plot(names(mean_interval), mean_interval, type = "l", xlab = "interval", ylab = "average")
plot(names(mean_interval), mean_interval, type = "l", xlab = "interval", ylab = "average", lw = 2)
plot(names(mean_interval), mean_interval, type = "l", xlab = "interval", ylab = "average", lw = 2)
which(max(mean_interval))
which.max(mean_interval)
max(mean_interval)
which(mean_interval == max(mean_interval))
104*5
mean_interval[104]
plot(names(mean_interval), mean_interval, type = "l", xlab = "interval", ylab = "average")
8*12
which.max(mean_interval)
name(index)
plot(names(mean_interval), mean_interval, type = "l", xlab = "interval", ylab = "average")
index = which.max(mean_interval)
name(index)
index
names(index)
sum(is.na(dtable))
2304 + 15264
5 % 3
?mod
?%
%modulo
2%%4
4%%4
4%%5
4%%8
nb_intervals = length(sum_day)
dtable = read.csv("activity/activity.csv")
summary(dtable)
dtable$date = as.character(dtable$date)
new_data = na.omit(dtable)
sum_day = tapply(new_data$steps, new_data$date, sum)
sum_day
d = is.na(dtable)
View(d)
288*5
24*5
24*12
Vew(dtable)
View(dtable)
mean(dtable)
mean(dtable, na.rm = TRUE)
table(dtable$steps, dtable$date)
tapply(dtable$steps, dtable$date, sum)
tapply(dtable$steps, dtable$date, sum, na.rm = TRUE)
tapply(dtable$steps, dtable$date, mean, na.rm = TRUE)
tapply(dtable$steps, dtable$date, median, na.rm = TRUE)
tapply(dtable$steps, dtable$date, mean, na.rm = TRUE)
tapply(dtable$steps, dtable$date, sum, na.rm = TRUE)
tapply(dtable$steps, dtable$date, median, na.rm = TRUE)
tapply(dtable$steps, dtable$date, mean, na.rm = TRUE)
tapply(dtable$steps, dtable$interval, mean, na.rm = TRUE)
tapply(dtable$steps, dtable$interval, median, na.rm = TRUE)
tapply(dtable$steps, dtable$interval, mean, na.rm = TRUE)
mean_interval = tapply(new_data$steps, new_data$interval, mean)
mean_interval
mean_interval$2320
mean_interval$"2320"
names(mean_interval)
which(nb_missing_values)
nb_missing_values = sum(is.na(dtable))
which(nb_missing_values)
which(nb_missing_values == TRUE)
which(is.na(dtable$steps))
nb_intervals = length(mean_interval)
nb_intervals
View(dtable)
mean_interval = tapply(dtable$steps, dtable$interval, mean, na.rm = TRUE)
nb_intervals = length(mean_interval)
na_indices = which(is.na(dtable$steps))
dtable[na_indices, 1] = mean_interval[(((na_indices - 1)%% nb_intervals) + 1)]
View(dtable)
View(dtable)
nb_intervals = length(mean_interval)
na_indices = which(is.na(dtable$steps))
new_dtable = dtable
new_dtable[na_indices, 1] = mean_interval[(((na_indices - 1)%% nb_intervals) + 1)]
```
new_dtable = dtable
new_dtable[na_indices, 1] = mean_interval[(((na_indices - 1)%% nb_intervals) + 1)]
na_indices
dtable = read.csv("activity/activity.csv")
summary(dtable)
dtable$date = as.character(dtable$date)
new_data = na.omit(dtable)
sum_day = tapply(new_data$steps, new_data$date, sum)
hist(sum_day)
mean_steps = mean(sum_day)
median_steps = median(sum_day)
mean_interval = tapply(new_data$steps, new_data$interval, mean)
plot(names(mean_interval), mean_interval, type = "l", xlab = "interval", ylab = "average")
index = which.max(mean_interval)
max_interval = names(index)
nb_missing_values = sum(is.na(dtable))
nb_intervals = length(mean_interval)
na_indices = which(is.na(dtable$steps))
new_dtable = dtable
new_dtable[na_indices, 1] = mean_interval[(((na_indices - 1)%% nb_intervals) + 1)]
new_dtable$date = as.character(new_dtable$date)
new_sum_day = tapply(new_dtable$steps, new_dtable$date, sum)
hist(new_sum_day)
new_median_steps = median(new_sum_day)
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r}
dtable = read.csv("activity/activity.csv")
summary(dtable)
```
## What is mean total number of steps taken per day?
The total number of steps taken per day:
```{r}
dtable$date = as.character(dtable$date)
new_data = na.omit(dtable)
sum_day = tapply(new_data$steps, new_data$date, sum)
```
Histogram of the total number of steps taken each day:
```{r}
hist(sum_day)
mean_steps = mean(sum_day)
median_steps = median(sum_day)
```
The mean and median of the total number of steps taken per day are `r mean_steps` and `r median_steps` respectively.
## What is the average daily activity pattern?
Plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r}
mean_interval = tapply(new_data$steps, new_data$interval, mean)
plot(names(mean_interval), mean_interval, type = "l", xlab = "interval", ylab = "average")
index = which.max(mean_interval)
max_interval = names(index)
```
The 5-minute interval which contains the maximum number of steps is `r max_interval`.
## Imputing missing values
```{r}
nb_missing_values = sum(is.na(dtable))
```
The total number of missing values in the dataset is `r nb_missing_values`.
Filling the missing values in the dataset.
Fist, the mean of each interval is already computed in mean_interval variable.
```{r}
nb_intervals = length(mean_interval)
na_indices = which(is.na(dtable$steps))
new_dtable = dtable
new_dtable[na_indices, 1] = mean_interval[(((na_indices - 1)%% nb_intervals) + 1)]
```
Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r}
new_dtable$date = as.character(new_dtable$date)
new_sum_day = tapply(new_dtable$steps, new_dtable$date, sum)
```
Histogram of the total number of steps taken each day:
```{r}
hist(new_sum_day)
new_mean_steps = mean(new_sum_day)
new_median_steps = median(new_sum_day)
```
The mean and median of the total number of steps taken per day (using filling dataset) are `r new_mean_steps` and `r new_median_steps` respectively.
## Are there differences in activity patterns between weekdays and weekends?
hist(sum_day, xlab = "Total number of step", main = "Histogram of the total number of steps taken each day")
weekdays(dtable$date)
weekdays(as.date(dtable$date)
)
dtable = read.csv("activity/activity.csv")
class(dtable$date)
new_dtable$data = format(new_dtable$data, "%y-%m-%d")
View(new_dtable)
View(new_dtable)
new_dtable$date = format(new_dtable$date, "%y-%m-%d")
?format
b
new_dtable$date = as.Date(new_dtable$date, "%y-%m-%d")
View(new_dtable)
View(new_dtable)
View(new_dtable)
View(new_dtable)
new_dtable = dtable
new_dtable[na_indices, 1] = mean_interval[(((na_indices - 1)%% nb_intervals) + 1)]
View(new_dtable)
View(new_dtable)
new_dtable$date = as.Date(new_dtable$date, "%Y-%m-%d")
View(new_dtable)
View(new_dtable)
class(new_dtable$date )
weekdays(new_dtable$date )
?weekdays
?weekend
?weekends
?factor
factor((week_days %in% c("Sunday", "Saturday"), levels = c("weekend", "weekday"))
factor((week_days %in% c("Sunday", "Saturday")), levels = c("weekend", "weekday"))
week_days = weekdays(new_dtable$date )
factor((week_days %in% c("Sunday", "Saturday")), levels = c("weekend", "weekday"))
(week_days %in% c("Sunday", "Saturday"))
factor((week_days %in% c("Sunday", "Saturday")), labels = c("weekend", "weekday"))
new_dtable$date = as.Date(new_dtable$date, "%Y-%m-%d")
week_days = weekdays(new_dtable$date )
new_dtable$day_week = factor((week_days %in% c("Sunday", "Saturday")), labels = c("weekend", "weekday"))
View(new_dtable)
View(new_dtable)
weekdays("10/01/2012")
weekdays(as.Date("10/01/2012"))
as.Date("10/01/2012")
weekdays(as.Date("10/01/2012", "%m/%d/%Y"))
as.Date("10/01/2012", "%m/%d/%Y")
tail(new_dtable)
new_dtable = dtable
new_dtable[na_indices, 1] = mean_interval[(((na_indices - 1)%% nb_intervals) + 1)]
new_dtable$date = as.Date(new_dtable$date, "%Y-%m-%d")
new_dtable$date
week_days = weekdays(new_dtable$date )
wekk_days[1]
week_days[1]
new_dtable$day_week = factor((week_days %in% c("Sunday", "Saturday")), labels = c("weekend", "weekday"))
new_dtable$day_week[1]
(week_days[1] %in% c("Sunday", "Saturday"))
new_dtable$date = as.Date(new_dtable$date, "%Y-%m-%d")
week_days = weekdays(new_dtable$date )
new_dtable$day_week = factor((week_days %in% c("Sunday", "Saturday")), labels = c("weekday", "weekend"))
View(new_dtable)
View(new_dtable)
dtable[1500, ]
new_dtable[1500, ]
xyplot(interval ~ steps| day_week, data = new_dtable, layout = c(2, 1))
libarary(lattice)
library(lattice)
xyplot(interval ~ steps| day_week, data = new_dtable, layout = c(2, 1))
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(2, 1))
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2))
xyplot(mean(steps) ~ interval| day_week, data = new_dtable, layout = c(1, 2))
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2))
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2))
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), type = "l")
?xyplot
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), type = "l", panel = mean)
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), type = "l", panel = mean)
?xyplot
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), type = "l", groups = mean)
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x):mean(x))
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x){mean(x)})
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x){mean(x)})
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x){panel.average(x)})
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x){panel.xyplot(mean(x)})
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x){panel.xyplot(mean(x))})
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x){panel.xyplot(mean(x))})
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x, y){panel.xyplot(x, mean(y))})
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x, y){panel.xyplot(x, y)})
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x, y){panel.xyplot(x, max(y))})
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x, y){panel.average(x, y)})
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x, y){panel.average(y, x)})
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x, y){panel.average(x, x)})
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x, y){panel.average(x, y)})
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x, y, ...){panel.average(x, y, ...)})
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x, y, ...){panel.average(x, y, ...)})
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x, y, ...){panel.average(x, y, col='blue', lwd=2, horizontal=F)})
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x, y, ...){panel.average(x, y, col='blue', lwd=1, horizontal=F)})
plot(c(1,2,3))
library(lattice)
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x, y, ...){panel.average(x, y, col='blue', lwd=1, horizontal=F)})
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x, y, ...){panel.average(x, y, col='blue', lwd=1, horizontal=F)}, ylim = c(0, 200))
xyplot(steps ~ interval| day_week, data = new_dtable, layout = c(1, 2), panel = function(x, y, ...){panel.average(x, y, col='blue', lwd=1, horizontal=F)}, ylim = c(0, 250))
```
